/******
 * read : I/O for storage pipes
 ******/

class FixedWidth t where
  fixedWidth :: long

instance FixedWidth () where
  fixedWidth = 0L
instance FixedWidth bool where
  fixedWidth = 1L
instance FixedWidth byte where
  fixedWidth = 1L
instance FixedWidth char where
  fixedWidth = 1L
instance FixedWidth short where
  fixedWidth = 2L
instance FixedWidth int where
  fixedWidth = 4L
instance FixedWidth long where
  fixedWidth = 8L
instance FixedWidth int128 where
  fixedWidth = 16L
instance FixedWidth float where
  fixedWidth = 4L
instance FixedWidth double where
  fixedWidth = 8L
instance (FixedWidth a) => FixedWidth [:a|n:] where
  fixedWidth = salength(newPrim()::[:a|n:]) * (fixedWidth :: (FixedWidth a) => long)
instance (r={h*()}, FixedWidth h) => FixedWidth r where
  fixedWidth = (fixedWidth :: (FixedWidth h) => long)
instance (p=(h*()), FixedWidth h) => FixedWidth p where
  fixedWidth = (fixedWidth :: (FixedWidth h) => long)
instance (v=|()+0|) => FixedWidth v where
  fixedWidth = 4L
instance (v=|()+t|, FixedWidth t) => FixedWidth v where
  fixedWidth = 4L

class PackedWidth t where
  packedWidth :: long
instance (FixedWidth t) => PackedWidth t where
  packedWidth = (fixedWidth :: (FixedWidth t) => long)
instance (r={h*t}, PackedWidth h, PackedWidth t) => PackedWidth r where
  packedWidth = (packedWidth :: (PackedWidth h) => long) + (packedWidth :: (PackedWidth t) => long)
instance (p=(h*t), PackedWidth h, PackedWidth t) => PackedWidth p where
  packedWidth = (packedWidth :: (PackedWidth h) => long) + (packedWidth :: (PackedWidth t) => long)

class HStoreRead a where
  hstoreRead :: <hobbes.storage.Transaction> -> (()+a)

instance (FixedWidth t) => HStoreRead t where
  hstoreRead txn = let n = (fixedWidth :: (FixedWidth t) => long) in (if (hstoreCanRead(txn, n)) then just((unsafeCast(hstoreUnsafeRead(txn, n))::{x:t}).x) else nothing)

class HStoreReadVariant v where
  hstoreReadVariant :: (<hobbes.storage.Transaction>, int) -> (()+v)

instance (v=|h+0|, HStoreRead h) => HStoreReadVariant v where
  hstoreReadVariant txn n = if (n == 0) then mapm(variantInjectHead, hstoreRead(txn) :: (()+h)) else nothing
instance (v=|h+t|, HStoreRead h, HStoreReadVariant t) => HStoreReadVariant v where
  hstoreReadVariant txn n = if (n == 0) then mapm(variantInjectHead, hstoreRead(txn) :: (()+h)) else unsafeCast(hstoreReadVariant(txn, n-1)::(()+t))

instance (HStoreReadVariant v) => HStoreRead v where
  hstoreRead txn = let t = hstoreRead(txn)::(()+int) in match t with | |1=n| -> hstoreReadVariant(txn, n) | _ -> nothing

hstoreReadFixedArray :: (FixedWidth t) => <hobbes.storage.Transaction> -> (()+[t])
hstoreReadFixedArray txn =
  let
    nn = (fixedWidth :: (FixedWidth long) => long);
    tn = (fixedWidth :: (FixedWidth t) => long)
  in
  if (not(hstoreCanRead(txn, nn))) then
    nothing
  else
   (let
      n = (unsafeCast(hstoreUnsafeRead(txn, nn))::{x:long}).x
    in
      if (not(hstoreCanRead(txn, n))) then
        nothing
      else
        just(unsafeCast(hstoreUnsafeReadFixedArray(txn, n * tn, n))))

instance (FixedWidth t) => HStoreRead [t] where
  hstoreRead = hstoreReadFixedArray

// faster reading of structs/tuples when they're stored packed (so here we're just inserting padding)
class HStoreDefReadInto t where
  hstoreDefReadInto :: (<hobbes.storage.Transaction>, t) -> ()
instance HStoreDefReadInto () where
  hstoreDefReadInto _ _ = ()
instance (r={h*t}, FixedWidth h, HStoreDefReadInto t) => HStoreDefReadInto r where
  hstoreDefReadInto txn r = do { recordHeadValue(r) <- ((unsafeCast(hstoreUnsafeRead(txn, fixedWidth :: (FixedWidth h) => long))::{x:h}).x); hstoreDefReadInto(txn, recordTail(r)); }
instance (r={h*t}, HStoreDefReadInto h, HStoreDefReadInto t) => HStoreDefReadInto r where
  hstoreDefReadInto txn r = do { hstoreDefReadInto(txn, recordHeadValue(r)); hstoreDefReadInto(txn, recordTail(r)); }
instance (p=(h*t), FixedWidth h, HStoreDefReadInto t) => HStoreDefReadInto p where
  hstoreDefReadInto txn p = do { p.0 <- ((unsafeCast(hstoreUnsafeRead(txn, fixedWidth :: (FixedWidth h) => long))::{x:h}).x); hstoreDefReadInto(txn, tupleTail(p)); }
instance (p=(h*t), HStoreDefReadInto h, HStoreDefReadInto t) => HStoreDefReadInto p where
  hstoreDefReadInto txn p = do { hstoreDefReadInto(txn, p.0); hstoreDefReadInto(txn, tupleTail(p)); }

instance (PackedWidth t, HStoreDefReadInto t) => HStoreRead t where
  hstoreRead txn = let n = (packedWidth :: (PackedWidth t) => long) in (if (hstoreCanRead(txn, n)) then do{r=newPrim()::t; hstoreDefReadInto(txn,r); return just(r)} else nothing)

// field-by-field reading (slightly less efficient than previous cases so a reasonable last resort)
class HStoreReadInto t where
  hstoreReadInto :: (<hobbes.storage.Transaction>, t) -> bool
instance HStoreReadInto () where
  hstoreReadInto _ _ = true

instance (p=(h*t), HStoreReadInto h, HStoreReadInto t) => HStoreReadInto p where
  hstoreReadInto txn p = hstoreReadInto(txn,p.0) and hstoreReadInto(txn,tupleTail(p))
instance (p=(h*t), HStoreRead h, HStoreReadInto t) => HStoreReadInto p where
  hstoreReadInto txn p = match (hstoreRead(txn) :: (()+h)) with | |1=hv| -> do { p.0 <- hv; return hstoreReadInto(txn, tupleTail(p)) } | _ -> false

instance (r={h*t}, HStoreReadInto h, HStoreReadInto t) => HStoreReadInto r where
  hstoreReadInto txn r = hstoreReadInto(txn,recordHeadValue(r)) and hstoreReadInto(txn,recordTail(r))
instance (r={h*t}, HStoreRead h, HStoreReadInto t) => HStoreReadInto r where
  hstoreReadInto txn r = match (hstoreRead(txn) :: (()+h)) with | |1=hv| -> do { recordHeadValue(r) <- hv; return hstoreReadInto(txn, recordTail(r)) } | _ -> false

instance (HStoreReadInto t) => HStoreRead t where
  hstoreRead txn = do { r = newPrim(); return (if hstoreReadInto(txn, r) then just(r) else nothing) }

// not the most efficient way to read arrays, but a usable last resort
hstoreReadArr :: (HStoreRead t) => (<hobbes.storage.Transaction>, [t], long) -> bool
hstoreReadArr txn r i =
  if (i == size(r)) then
    true
  else
   (match hstoreRead(txn) with
    | |1=e| -> do { r[i] <- e; return hstoreReadArr(txn, r, i+1L) }
    | _     -> false)

instance (HStoreRead t) => HStoreRead [t] where
  hstoreRead txn = match (hstoreRead(txn)::(()+long)) with | |1=n| -> do { r = newArray(n); return (if hstoreReadArr(txn, r, 0L) then just(r) else nothing) } | _ -> nothing

// not the most efficient way to read fixed-length arrays, but a usable last resort
hstoreReadFixedArr :: (HStoreRead t) => (<hobbes.storage.Transaction>, [:t|n:], long) -> (()+[:t|n:])
hstoreReadFixedArr txn r i =
  if (i == size(r)) then
    just(r)
  else
   (match hstoreRead(txn) with
    | |1=e| -> do { saelem(r,i) <- e; return hstoreReadFixedArr(txn, r, i+1L) }
    | _     -> nothing)

instance (HStoreRead t) => HStoreRead [:t|n:] where
  hstoreRead txn = hstoreReadFixedArr(txn, newPrim(), 0L)

// rudely peer into opaque type aliases to read them
instance (Data d t, HStoreRead t) => HStoreRead d where
  hstoreRead txn = unsafeCast(hstoreRead(txn)::(()+t))

