/*
 * ordering overloading
 */
class Ord a b where
  (<)  :: (a, b) -> bool
  (<=) :: (a, b) -> bool
  (>)  :: (a, b) -> bool
  (>=) :: (a, b) -> bool

instance Ord bool bool where
  x <  y = if x then false else y
  x <= y = if x then y else true
  x >  y = if y then false else x
  x >= y = if y then x else true

instance Ord char char where
  (<)  = clt
  (<=) = clte
  (>)  = cgt
  (>=) = cgte

instance Ord byte byte where
  (<)  = blt
  (<=) = blte
  (>)  = bgt
  (>=) = bgte

instance Ord short short where
  (<)  = slt
  (<=) = slte
  (>)  = sgt
  (>=) = sgte

instance Ord int int where
  (<)  = ilt
  (<=) = ilte
  (>)  = igt
  (>=) = igte

instance Ord long long where
  (<)  = llt
  (<=) = llte
  (>)  = lgt
  (>=) = lgte

instance Ord int128 int128 where
  (<)  = i16lt
  (<=) = i16lte
  (>)  = i16gt
  (>=) = i16gte

instance Ord float float where
  (<)  = flt
  (<=) = flte
  (>)  = fgt
  (>=) = fgte

instance Ord double double where
  (<)  = dlt
  (<=) = dlte
  (>)  = dgt
  (>=) = dgte

// catch the time-related types
instance Ord timespan timespan where
  x <  y = (convert(x)::long) <  (convert(y)::long)
  x <= y = (convert(x)::long) <= (convert(y)::long)
  x >  y = (convert(x)::long) >  (convert(y)::long)
  x >= y = (convert(x)::long) >= (convert(y)::long)

instance Ord time time where
  x <  y = (convert(x)::long) <  (convert(y)::long)
  x <= y = (convert(x)::long) <= (convert(y)::long)
  x >  y = (convert(x)::long) >  (convert(y)::long)
  x >= y = (convert(x)::long) >= (convert(y)::long)

instance Ord datetime datetime where
  x <  y = (convert(x)::long) <  (convert(y)::long)
  x <= y = (convert(x)::long) <= (convert(y)::long)
  x >  y = (convert(x)::long) >  (convert(y)::long)
  x >= y = (convert(x)::long) >= (convert(y)::long)

instance (Ord a b) => Ord a@f b where
  x <  y = load(x) <  y
  x <= y = load(x) <= y
  x >  y = load(x) >  y
  x >= y = load(x) >= y

instance (Ord a b) => Ord a b@f where
  x <  y = x <  load(y)
  x <= y = x <= load(y)
  x >  y = x >  load(y)
  x >= y = x >= load(y)

// variant ordering
instance (Ord a c, Ord b d) => Ord (a+b) (c+d) where
  x <  y = (match x y with | |0=ax| |0=cy| -> ax <  cy | |1=bx| |1=dy| -> bx <  dy | |0=_| _ -> true  | _ _ -> false)
  x <= y = (match x y with | |0=ax| |0=cy| -> ax <= cy | |1=bx| |1=dy| -> bx <= dy | |0=_| _ -> true  | _ _ -> false)
  x >  y = (match x y with | |0=ax| |0=cy| -> ax >  cy | |1=bx| |1=dy| -> bx >  dy | |0=_| _ -> false | _ _ -> true)
  x >= y = (match x y with | |0=ax| |0=cy| -> ax >= cy | |1=bx| |1=dy| -> bx >= dy | |0=_| _ -> false | _ _ -> true)

instance (Ord a b, Ord a c) => Ord a (b+c) where
  x <  y = case y of |0:yv=x <  yv, 1:yv=x <  yv|
  x <= y = case y of |0:yv=x <= yv, 1:yv=x <= yv|
  x >  y = case y of |0:yv=x >  yv, 1:yv=x >  yv|
  x >= y = case y of |0:yv=x >= yv, 1:yv=x >= yv|
instance (Ord a b) => Ord a (b+c) where
  x <  y = case y of |0:yv=x <  yv,1:yv=false|
  x <= y = case y of |0:yv=x <= yv,1:yv=false|
  x >  y = case y of |0:yv=x >  yv,1:yv=false|
  x >= y = case y of |0:yv=x >= yv,1:yv=false|
instance (Ord a c) => Ord a (b+c) where
  x <  y = case y of |0:yv=false, 1:yv=x <  yv|
  x <= y = case y of |0:yv=false, 1:yv=x <= yv|
  x >  y = case y of |0:yv=false, 1:yv=x >  yv|
  x >= y = case y of |0:yv=false, 1:yv=x >= yv|
instance (Ord a c) => Ord (a+b) c where
  x <  y = case x of |0:xv=xv <  y,1:yv=false|
  x <= y = case x of |0:xv=xv <= y,1:yv=false|
  x >  y = case x of |0:xv=xv >  y,1:yv=false|
  x >= y = case x of |0:xv=xv >= y,1:yv=false|
instance (Ord b c) => Ord (a+b) c where
  x <  y = case x of |0:xv=false, 1:xv=xv <  y|
  x <= y = case x of |0:xv=false, 1:xv=xv <= y|
  x >  y = case x of |0:xv=false, 1:xv=xv >  y|
  x >= y = case x of |0:xv=false, 1:xv=xv >= y|

// enum-like variants can be ordered inexpensively
instance (VariantTrunc v v) => Ord v v where
  x <  y = (unsafeCast(x)::(int*long)).0 <  (unsafeCast(y)::(int*long)).0
  x <= y = (unsafeCast(x)::(int*long)).0 <= (unsafeCast(y)::(int*long)).0
  x >  y = (unsafeCast(x)::(int*long)).0 >  (unsafeCast(y)::(int*long)).0
  x >= y = (unsafeCast(x)::(int*long)).0 >= (unsafeCast(y)::(int*long)).0

// we can do this more efficiently (rewrite 'variantSplit' to 'variantApp') ...
class VariantCtorIndex v where
  variantCtorIndexFrom :: (v,int) -> int

instance VariantCtorIndex 0 where
  variantCtorIndexFrom _ i = i

instance (v=|_+t|, VariantCtorIndex t) => VariantCtorIndex v where
  variantCtorIndexFrom v i = variantSplit(v, \_.i, \t.variantCtorIndexFrom(t, iadd(i,1)))

variantCtorIndex v = variantCtorIndexFrom(v,0)

instance Ord 0 0 where
  _ <  _ = false
  _ <= _ = false
  _ >  _ = false
  _ >= _ = false

instance (v=|a+t|, Ord a a, Ord t t) => Ord v v where
  x <  y = variantSplit(x, \hx.variantSplit(y, \hy.hx <  hy, \_.variantCtorIndex(x) <  variantCtorIndex(y)), \tx.variantSplit(y, \_.variantCtorIndex(x) <  variantCtorIndex(y), \ty.tx <  ty))
  x <= y = variantSplit(x, \hx.variantSplit(y, \hy.hx <= hy, \_.variantCtorIndex(x) <= variantCtorIndex(y)), \tx.variantSplit(y, \_.variantCtorIndex(x) <= variantCtorIndex(y), \ty.tx <= ty))
  x >  y = variantSplit(x, \hx.variantSplit(y, \hy.hx >  hy, \_.variantCtorIndex(x) >  variantCtorIndex(y)), \tx.variantSplit(y, \_.variantCtorIndex(x) >  variantCtorIndex(y), \ty.tx >  ty))
  x >= y = variantSplit(x, \hx.variantSplit(y, \hy.hx >= hy, \_.variantCtorIndex(x) >= variantCtorIndex(y)), \tx.variantSplit(y, \_.variantCtorIndex(x) >= variantCtorIndex(y), \ty.tx >=  ty))

// lexicographic ordering for arrays
arrCmp :: (Array c a, Array d b, Ord a b) => (bool, c, d, long, long) -> bool
arrCmp d xs ys i e =
  if (i == e) then
    (size(xs) < size(ys) or (d and size(xs) == size(ys)))
  else if (element(xs,i) < element(ys,i)) then
    true
  else if (element(ys,i) < element(xs,i)) then
    false
  else
    arrCmp(d, xs, ys, i+1L, e)

instance (Array c a, Array d b, Ord a b) => Ord c d where
  xs <  ys = arrCmp(false, xs, ys, 0L, min(size(xs), size(ys)))
  xs <= ys = arrCmp(true,  xs, ys, 0L, min(size(xs), size(ys)))
  xs >  ys = arrCmp(false, ys, xs, 0L, min(size(ys), size(xs)))
  xs >= ys = arrCmp(true,  ys, xs, 0L, min(size(ys), size(xs)))

instance Ord () () where
  _ <  _ = false
  _ <= _ = true
  _ >  _ = false
  _ >= _ = true

instance (r={h*t}, Eq h, Ord h h, Ord t t) => Ord r r where
  x <  y = if (recordHeadValue(x) === recordHeadValue(y)) then (recordTail(x) <  recordTail(y)) else (recordHeadValue(x) < recordHeadValue(y))
  x <= y = if (recordHeadValue(x) === recordHeadValue(y)) then (recordTail(x) <= recordTail(y)) else (recordHeadValue(x) < recordHeadValue(y))
  y >  x = if (recordHeadValue(x) === recordHeadValue(y)) then (recordTail(x) <  recordTail(y)) else (recordHeadValue(x) < recordHeadValue(y))
  y >= x = if (recordHeadValue(x) === recordHeadValue(y)) then (recordTail(x) <= recordTail(y)) else (recordHeadValue(x) < recordHeadValue(y))

instance (r=(h*t), Eq h, Ord h h, Ord t t) => Ord r r where
  x <  y = if (x.0 === y.0) then (tupleTail(x) <  tupleTail(y)) else (x.0 < y.0)
  x <= y = if (x.0 === y.0) then (tupleTail(x) <= tupleTail(y)) else (x.0 < y.0)
  y >  x = if (x.0 === y.0) then (tupleTail(x) <  tupleTail(y)) else (x.0 < y.0)
  y >= x = if (x.0 === y.0) then (tupleTail(x) <= tupleTail(y)) else (x.0 < y.0)

// ordering between convertible types
instance (a != b, Convert a b) => Ord a b where
  x <  y = (convert(x)::b) <  y
  x <= y = (convert(x)::b) <= y
  x >  y = (convert(x)::b) >  y
  x >= y = (convert(x)::b) >= y

instance (a != b, Convert b a) => Ord a b where
  x <  y =  x <  (convert(y)::a)
  x <= y =  x <= (convert(y)::a)
  x >  y =  x >  (convert(y)::a)
  x >= y =  x >= (convert(y)::a)

