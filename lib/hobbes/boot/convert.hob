/*
 * convert : define "meaning-preserving" conversions between types (ie: equivalent values in different representations)
 */
instance Convert byte int where
  convert = b2i

instance Convert byte long where
  convert = b2l

instance Convert short int where
  convert = s2i

instance Convert short long where
  convert x = i2l(s2i(x))

instance Convert short double where
  convert x = i2d(s2i(x))

instance Convert int long where
  convert = i2l

instance Convert int double where
  convert = i2d

instance Convert int float where
  convert = i2f

instance Convert long double where
  convert = l2d

instance Convert long float where
  convert = l2f

instance Convert float double where
  convert = f2d

instance Convert a a where
  convert = id

instance Convert a@f a where
  convert = load

instance (Convert a b) => Convert a@f b where
  convert x = convert(load(x))

// convert to a prefix record by plain casting
class Castable a b where
  cast :: a -> b

instance Castable a () where
  cast _ = ()

instance (ar={lbl:h*at}, br={lbl:h*bt}, Castable at bt) => Castable ar br where
  cast = unsafeCast

instance (ar={lbl:ah*at}, br={lbl:bh*()}, Castable ah bh) => Castable ar br where
  cast = unsafeCast

instance (ap=(h*at), bp=(h*bp), Castable at bt) => Castable ap bp where
  cast = unsafeCast

instance (ap=(ah*at), bp=(bh*()), Castable ah bh) => Castable ap bp where
  cast = unsafeCast

instance Castable a@f long where
  cast = unsafeCast

instance Castable a@? long where
  cast = unsafeCast

instance Castable a@f a@? where
  cast = unsafeCast

instance (Castable a b, b != ()) => Convert a b where
  convert = cast

class MemIdentical a b where
  micast :: a -> b

instance MemIdentical () () where
  micast _ = ()

instance MemIdentical a a where
  micast = id

instance (p=(h*t), MemIdentical t ()) => MemIdentical p h where
  micast = unsafeCast

instance (p=(h*pt), q=(h*qt), MemIdentical pt qt) => MemIdentical p q where
  micast = unsafeCast

instance (p=(()*pt), MemIdentical pt q) => MemIdentical p q where
  micast = unsafeCast

instance (MemIdentical p q) => Castable [p] [q] where
  cast = unsafeCast

// convert records with permuted/convertible fields
class ConvertInto a b where
  convertInto :: (a, b) -> ()

instance ConvertInto a () where
  convertInto s _ = ()

instance (r={lbl:h*t}, s/lbl :: x, ConvertInto x h, ConvertInto s t) => ConvertInto s r where
  convertInto s r = let _ = convertInto(fieldValue(s) :: (s/lbl :: x) => x, recordHeadValue(r)) in convertInto(s, recordTail(r))

instance (r={lbl:h*t}, s/lbl :: x, Convert x h, ConvertInto s t) => ConvertInto s r where
  convertInto s r = let _ = recordHeadValue(r) <- convert(fieldValue(s) :: (s/lbl :: x) => x) in convertInto(s, recordTail(r))

instance (ConvertInto a b, b != ()) => Convert a b where
  convert s = let r = newPrim(); _ = convertInto(s, r) in r

// write a variable-length array into a fixed-length array (maybe we should convert while writing?)
copyToSA :: ([:a|n:], [a], long) -> ()
copyToSA sxs xs i =
  if (leq(i,length(xs)) or leq(i,salength(sxs))) then
    ()
  else do {
    saelem(sxs,i) <- xs[i];
    copyToSA(sxs,xs,ladd(i,1L));
  }

/*
 * partial conversion
 */
class SelectInto src dst where
  selectInto :: (src,dst) -> ()

instance SelectInto [a] [:a|n:] where
  selectInto src dst = copyToSA(dst, src, 0L)

instance SelectInto () to where
  selectInto src dst = ()

instance (src={lbl:sh*tsrc}, dst/lbl :: dh, SelectInto sh dh, SelectInto tsrc dst) => SelectInto src dst where
  selectInto src dst = let _ = selectInto(recordHeadValue(src), fieldValue(dst) :: (dst/lbl :: dh) => dh) in selectInto(recordTail(src), dst)

instance (src={lbl:sh*tsrc}, dst/lbl :: dh, Convert sh dh, SelectInto tsrc dst) => SelectInto src dst where
  selectInto src dst = let _ = (fieldValue(dst) :: (dst/lbl :: dh) => dh) <- convert(recordHeadValue(src)) in selectInto(recordTail(src), dst)

instance (src={lbl:[char]*tsrc}, dst/lbl :: <std.string>, SelectInto tsrc dst) => SelectInto src dst where
  selectInto src dst = let _ = stdstringAssign(fieldValue(dst) :: (dst/lbl :: <std.string>) => <std.string>, recordHeadValue(src)) in selectInto(recordTail(src), dst)

